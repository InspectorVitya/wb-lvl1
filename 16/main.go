// Реализовать быструю сортировку массива (quicksort) встроенными методами языка.
package main

import "fmt"

func quickSort(arr []int) {
	if len(arr) <= 1 {
		return
	}
	left, right := 0, len(arr)-1
	pivot := len(arr) / 2                           // опорный элемент
	arr[pivot], arr[right] = arr[right], arr[pivot] // установим опорный элемент вправо

	for i := range arr {
		// если элемент >= опорному, по идее мы должны его перенести вправо.
		//Но, поскольку опорный - самый правый, то пока что работаем с меньшими элементами, чем опорный
		// находим элемент, меньший опорного
		if arr[i] < arr[right] {
			arr[left], arr[i] = arr[i], arr[left]
			left++
		}
	}
	// после цикла left содержит позицию первого элемента (слева направо), который больше, чем опорный
	// поскольку из цикла вышли, то a[left] превысил (либо равен) самому правому (опорному) элементу.
	// Поскольку опорный меньше (либо равен) a[left],
	// меняем их
	arr[left], arr[right] = arr[right], arr[left]
	// в итоге - [0:left] - элементы, точно меньшие опорного. А справа от позиции left - элементы, бОльшие опорного
	// сортируем отдельно левую часть (не включая опорный элемент)
	quickSort(arr[:left])
	// и правую (не включая опорный элемент)
	quickSort(arr[left+1:])
}
func main() {
	array := []int{9, 8, 7, 6, 5, 4, 3}
	fmt.Println(array)
	quickSort(array)
	fmt.Println(array)
}
